// 에러가 발생하지 않는 무결한 코드
// data.sort((a, b) => (a[key] > b[key] ? -1 : (a[key] < b[key] ? 1 : 0)))

let data = ['a', 'z', 'b', 'e'];
data.sort();
//문제 없이 잘 정렬됨


// 사전식 정렬이기 때문에 아래와 같은 값은 정렬이 되지 않는다
// 다시 말해서 아래 입력된 값은 이미 최종 정렬된 순서와 같다
let data = ['1', '11', '2', '22'];
data.sort();

// 지금 꼭 이해해야하는 건 아님. 실무 db로 가지고 있으라고 주는 코드 
// data.sort(a, b) => (a > b ? -1 : (a < b ? 1 : 0)))


// 여러분들이 자주 사용하는 코드 
let data = [1, 11, 2, 111, 22];
data.sort((a, b) => (a - b)); // 오름차순
data.sort((a, b) => (b - a)); // 내림차순
// (a, b) => (a - b) 가 콜백함수이다 
// a-b값이 0보다 작은 경우, a를 b보다 낮은 색인으로 정렬한다
// 즉, a가 먼저 온다
// a-b값이 0보다 큰 경우, b를 a보다 낮은 인덱스로 소트한다 
// 즉, b가 먼저 온다 

// 원리
let test = [13, 9, 10, 2];
test.sort(a,b) =>{
    console.log(a,b) 
}
// 출력해보면 a, b의 값이 순차적으로 들어가지 않는다 
// 출력값: 9 13 
// 출력값: 10 9
// 출력값: 2 10

let test = [13, 9, 10, 2];
test.sort(a,b) =>{
    console.log(a,b) 
    console.log(a - b)
}
// a-b -> 작은 값이 앞으로 간다 => 오름차순

